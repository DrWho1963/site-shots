name: Daily Site Screenshots (One Email per URL)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 11 * * *"  # 7:00 AM Knoxville (UTC-5/UTC-4 DST)


  workflow_dispatch: {}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.collect.outputs.urls }}
    steps:
      - uses: actions/checkout@v4

      # Build JSON array of URLs from secret SHOT_URLS (comma-separated) or urls.json
      - id: collect
        env:
          SHOT_URLS: ${{ secrets.SHOT_URLS }}
        run: |
          if [ -n "$SHOT_URLS" ]; then
            json=$(python - <<'PY'
import os, json
raw = os.environ.get("SHOT_URLS","")
urls = [u.strip() for u in raw.split(",") if u.strip()]
print(json.dumps(urls))
PY
)
            echo "urls=$json" >> "$GITHUB_OUTPUT"
          else
            sudo apt-get update -y && sudo apt-get install -y jq
            echo "urls=$(jq -c . urls.json)" >> "$GITHUB_OUTPUT"
          fi

  shoot_and_email:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        url: ${{ fromJSON(needs.prepare.outputs.urls) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Playwright + browsers
        run: |
          pip install playwright
          python -m playwright install --with-deps chromium

      # Take ONE small JPEG screenshot for this URL
      - name: Screenshot to JPEG
        env:
          SHOT_URLS: ${{ matrix.url }}
        run: |
          python scripts/daily_screenshot.py
          file="$(ls -1 shots/*.jpg | head -n1)"
          echo "SHOT_FILE=$file" >> "$GITHUB_ENV"
          echo "Using file: $file"

      # Send email with image INLINE (CID)
      - name: Email inline JPEG
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          URL_UNDER_TEST: ${{ matrix.url }}
          SHOT_FILE: ${{ env.SHOT_FILE }}
        run: |
          python - <<'PY'
import os, smtplib, ssl
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

server = os.environ["SMTP_SERVER"]
port = int(os.environ["SMTP_PORT"])
user = os.environ["SMTP_USERNAME"]
password = os.environ["SMTP_PASSWORD"]
from_addr = os.environ["FROM_EMAIL"]
to_addr = os.environ["TO_EMAIL"]
url = os.environ["URL_UNDER_TEST"]
shot_file = os.environ["SHOT_FILE"]

msg = MIMEMultipart('related')
msg['Subject'] = f"[Site Screenshot] {url}"
msg['From'] = from_addr
msg['To'] = to_addr

html = f"""
<html><body>
<p>Hi Darren,</p>
<p>Today's screenshot for <b>{url}</b>:</p>
<p><img src="cid:screenshot" style="max-width:100%;height:auto;"/></p>
<p>â€” GitHub Actions</p>
</body></html>
"""
alt = MIMEMultipart('alternative')
alt.attach(MIMEText("Inline screenshot attached (HTML).", 'plain'))
alt.attach(MIMEText(html, 'html'))
msg.attach(alt)

with open(shot_file, 'rb') as f:
    img = MIMEImage(f.read())
img.add_header('Content-ID', '<screenshot>')
img.add_header('Content-Disposition', 'inline', filename=os.path.basename(shot_file))
msg.attach(img)

ctx = ssl.create_default_context()
if port == 465:
    with smtplib.SMTP_SSL(server, port, context=ctx) as s:
        s.login(user, password)
        s.sendmail(from_addr, [to_addr], msg.as_string())
else:
    with smtplib.SMTP(server, port) as s:
        s.starttls(context=ctx)
        s.login(user, password)
        s.sendmail(from_addr, [to_addr], msg.as_string())
print(f"Sent inline screenshot for {url} from {from_addr} to {to_addr}: {shot_file}")
PY
