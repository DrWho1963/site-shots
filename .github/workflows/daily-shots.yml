name: Daily Screenshot Test (Mays Paving)

on:
  workflow_dispatch:

jobs:
  single_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Playwright + browsers
        run: |
          pip install playwright
          python -m playwright install --with-deps chromium

      - name: Screenshot Mays Paving
        env:
          # Your script will create: shots/www_mayspaving_com__YYYY-MM-DD_HHMMSS-UTC.jpg
          SHOT_URLS: "https://www.mayspaving.com/"
        shell: bash
        run: |
          set -e
          mkdir -p shots
          echo "Taking screenshot of $SHOT_URLS"
          python scripts/daily_screenshot.py
          shopt -s nullglob
          files=(shots/*.jpg shots/*.jpeg)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No screenshot found, skipping email."
            echo "SKIP_EMAIL=true" >> "$GITHUB_ENV"
          else
            echo "SHOT_FILE=${files[0]}" >> "$GITHUB_ENV"
            echo "Saved: ${files[0]}"
          fi

      - name: Email Screenshot
        if: ${{ env.SKIP_EMAIL != 'true' }}
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          URL_UNDER_TEST: "https://www.mayspaving.com/"
          SHOT_FILE: ${{ env.SHOT_FILE }}
        shell: bash
        run: |
          python - <<'PY'
import os, smtplib, ssl
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

server=os.environ["SMTP_SERVER"]
port=int(os.environ["SMTP_PORT"])
user=os.environ["SMTP_USERNAME"]
pw=os.environ["SMTP_PASSWORD"]
frm=os.environ["FROM_EMAIL"]
to=os.environ["TO_EMAIL"]
url=os.environ["URL_UNDER_TEST"]
shot=os.environ["SHOT_FILE"]

msg = MIMEMultipart("related")
msg["Subject"] = f"[Screenshot Test] {url}"
msg["From"] = frm
msg["To"] = to

alt = MIMEMultipart("alternative")
alt.attach(MIMEText(f"Screenshot for {url}", "plain"))
alt.attach(MIMEText(
    f"<p>Screenshot for <b>{url}</b>:</p>"
    f"<img src='cid:screenshot' style='max-width:100%;height:auto;'>",
    "html"
))
msg.attach(alt)

with open(shot, "rb") as f:
    img = MIMEImage(f.read())
img.add_header("Content-ID", "<screenshot>")
img.add_header("Content-Disposition", "inline", filename=os.path.basename(shot))
msg.attach(img)

ctx = ssl.create_default_context()
if port == 465:
    with smtplib.SMTP_SSL(server, port, context=ctx) as s:
        s.login(user, pw)
        s.sendmail(frm, [to], msg.as_string())
else:
    with smtplib.SMTP(server, port) as s:
        s.starttls(context=ctx)
        s.login(user, pw)
        s.sendmail(frm, [to], msg.as_string())

print(f"Sent screenshot for {url} â†’ {to} ({shot})")
PY
