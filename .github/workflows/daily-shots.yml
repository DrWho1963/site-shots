name: Daily Site Screenshots (One Email per URL)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 11 * * *"  # 7:00 AM US Eastern (runs in UTC)

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.collect.outputs.urls }}
    steps:
      - uses: actions/checkout@v4

      - id: collect
        run: |
          cat > urls.json <<'JSON'
          [
            "https://www.mayspaving.com/",
            "https://prioritybus.com/",
            "https://naturescharmboutique.com/",
            "https://www.darrenbgreen.com/",
            "https://eastersurveying.land/",
            "https://stumpcreeksausage.com/",
            "https://coldrunnerslogistics.com/",
            "https://www.oilfieldpatents.com/",
            "https://www.energy-ip.com/",
            "https://www.procraftwoodworks.com/",
            "https://soultoearththerapies.com/",
            "https://www.bradthetreeman.com/",
            "https://bestitchedemb.com/",
            "https://maxpenningtonseries.com/",
            "https://darrenbgreen.com/",
            "http://systemsandcontrols.com/",
            "https://www.greenspage.com/"
          ]
          JSON
          echo "urls=$(cat urls.json)" >> "$GITHUB_OUTPUT"

  shoot_and_email:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        url: ${{ fromJSON(needs.prepare.outputs.urls) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Playwright + browsers
        run: |
          pip install playwright
          python -m playwright install --with-deps chromium

      - name: Screenshot to JPEG
        env:
          SHOT_URLS: ${{ matrix.url }}   # one URL per job
        run: |
          set -e
          mkdir -p shots
          python scripts/daily_screenshot.py
          shopt -s nullglob
          files=(shots/*.jpg)
          if [ ${#files[@]} -eq 0 ]; then
            echo "SKIP_EMAIL=true" >> "$GITHUB_ENV"
          else
            echo "SHOT_FILE=${files[0]}" >> "$GITHUB_ENV"
            echo "Using file: ${files[0]}"
          fi

      - name: Email inline JPEG
        if: ${{ env.SKIP_EMAIL != 'true' }}
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          URL_UNDER_TEST: ${{ matrix.url }}
          SHOT_FILE: ${{ env.SHOT_FILE }}
        run: |
          python - <<'PY'
import os, smtplib, ssl
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

server=os.environ["SMTP_SERVER"]
port=int(os.environ["SMTP_PORT"])
user=os.environ["SMTP_USERNAME"]
pw=os.environ["SMTP_PASSWORD"]
frm=os.environ["FROM_EMAIL"]
to=os.environ["TO_EMAIL"]
url=os.environ["URL_UNDER_TEST"]
shot=os.environ["SHOT_FILE"]

msg=MIMEMultipart("related")
msg["Subject"]=f"[Site Screenshot] {url}"
msg["From"]=frm
msg["To"]=to

alt=MIMEMultipart("alternative")
alt.attach(MIMEText(f"Inline screenshot for {url}.", "plain"))
alt.attach(MIMEText(
    f"<p>Today's screenshot for <b>{url}</b>:</p>"
    f"<img src='cid:screenshot' style='max-width:100%;height:auto;'>",
    "html"
))
msg.attach(alt)

with open(shot, "rb") as f:
    img=MIMEImage(f.read())
img.add_header("Content-ID", "<screenshot>")
img.add_header("Content-Disposition", "inline", filename=os.path.basename(shot))
msg.attach(img)

ctx=ssl.create_default_context()
if port == 465:
    with smtplib.SMTP_SSL(server, port, context=ctx) as s:
        s.login(user, pw)
        s.sendmail(frm, [to], msg.as_string())
else:
    with smtplib.SMTP(server, port) as s:
        s.starttls(context=ctx)
        s.login(user, pw)
        s.sendmail(frm, [to], msg.as_string())
print(f"Sent screenshot for {url} -> {to} ({shot})")
PY
